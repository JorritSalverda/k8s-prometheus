apiVersion: v1
kind: Namespace
metadata:
  name: prometheus
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: prometheus
  namespace: prometheus
  labels:
    app: prometheus
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRole
metadata:
  name: prometheus
  labels:
    app: prometheus
rules:
- apiGroups: [""]
  resources:
  - nodes
  - nodes/proxy
  - services
  - endpoints
  - pods
  verbs: ["get", "list", "watch"]
- apiGroups:
  - extensions
  resources:
  - ingresses
  verbs: ["get", "list", "watch"]
- nonResourceURLs: ["/metrics"]
  verbs: ["get"]
---
apiVersion: rbac.authorization.k8s.io/v1beta1
kind: ClusterRoleBinding
metadata:
  name: prometheus
  labels:
    app: prometheus
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: prometheus
subjects:
- kind: ServiceAccount
  name: prometheus
  namespace: prometheus
---
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: prometheus
  namespace: prometheus
  labels:
    app: prometheus
  annotations:
    kubernetes.io/ingress.class: "nginx"
    estafette.io/cloudflare-dns: "true"
    estafette.io/cloudflare-proxy: "true"
    estafette.io/cloudflare-hostnames: "${HOSTNAME}"
spec:
  tls:
  - hosts:
    - ${HOSTNAME}
    secretName: prometheus-letsencrypt-certificate
  rules:
  - host: ${HOSTNAME}
    http:
      paths:
      - path: /
        backend:
          serviceName: prometheus
          servicePort: http
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus
  namespace: prometheus
  labels:
    app: prometheus
  annotations:
    prometheus.io/probe: "true"
    prometheus.io/probe-path: "/api/health"
spec:
  type: ClusterIP
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app: prometheus
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-thanos-peers
  namespace: prometheus
  labels:
    app: prometheus
spec:
  type: ClusterIP
  clusterIP: None
  ports:
  - name: cluster
    port: 10900
    targetPort: cluster
  selector:
    # Useful endpoint for gathering all thanos components for common gossip cluster.
    thanos-peer: "true"
---
apiVersion: v1
kind: Service
metadata:
  name: prometheus-sts
  namespace: prometheus
  labels:
    app: prometheus
spec:
  clusterIP: None
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  selector:
    app: prometheus
---
apiVersion: v1
kind: Secret
metadata:
  name: prometheus-letsencrypt-certificate
  namespace: prometheus
  labels:
    app: prometheus
  annotations:
    estafette.io/letsencrypt-certificate: "true"
    estafette.io/letsencrypt-certificate-hostnames: "${HOSTNAME}"
type: Opaque
---
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: prometheus
  namespace: prometheus
  labels:
    app: prometheus
spec:
  selector:
    matchLabels:
      app: prometheus
  maxUnavailable: 1
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: prometheus
  namespace: prometheus
  labels:
    app: prometheus
spec:
  replicas: 1
  revisionHistoryLimit: 10
  serviceName: prometheus-sts
  selector:
    matchLabels:
      app: prometheus
  template:
    metadata:
      labels:
        app: prometheus
        thanos-peer: "true"
      annotations:
        prometheus.io/scrape: "true"
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - prometheus
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 10
            preference:
              matchExpressions:
              - key: cloud.google.com/gke-preemptible
                operator: In
                values:
                - "true"
      serviceAccount: prometheus
      containers:
      - name: prometheus
        image: prom/prometheus:v2.6.0
        command: ["/bin/prometheus"]
        args: [
          "--config.file=/prometheus-config/prometheus.yaml",
          "--storage.tsdb.path=/prometheus",
          "--storage.tsdb.retention=24h",
          "--storage.tsdb.min-block-duration=2h",
          "--storage.tsdb.max-block-duration=2h",
          "--web.enable-lifecycle",
          "--web.external-url=https://${HOSTNAME}/"
        ]
        securityContext:
          runAsUser: 0
        resources:
          requests:
            cpu: 100m
            memory: 100Mi
          limits:
            cpu: 1000m
            memory: 1024Mi
        volumeMounts:
        - mountPath: /prometheus
          name: prometheus-data
        - mountPath: /prometheus-config
          name: prometheus-config
        - mountPath: /prometheus-rules
          name: prometheus-rules
        ports:
        - name: http
          containerPort: 9090
        livenessProbe:
          httpGet:
            path: /-/healthy
            port: http
          initialDelaySeconds: 120
          timeoutSeconds: 5
        readinessProbe:
          httpGet:
            path: /-/ready
            port: http
      - name: thanos-sidecar
        image: improbable/thanos:v0.2.1
        env:
        - name: GOOGLE_APPLICATION_CREDENTIALS
          value: /creds/gcs-credentials.json
        args:
        - "sidecar"
        - "--log.level=debug"
        - "--tsdb.path=/var/prometheus"
        - "--prometheus.url=http://127.0.0.1:9090"
        - "--cluster.peers=prometheus-thanos-peers.prometheus.svc.cluster.local:10900"
        - "--objstore.config-file=/etc/prometheus/bucket.yaml"
        - "--reloader.config-file=/etc/prometheus/prometheus.yaml.tmpl"
        - "--reloader.config-envsubst-file=/etc/prometheus-shared/prometheus.yaml"
        ports:
        - name: sidecar-http
          containerPort: 10902
        - name: grpc
          containerPort: 10901
        - name: cluster
          containerPort: 10900
        resources:
          requests:
            cpu: 10m
            memory: 10Mi
          limits:
            cpu: 1000m
            memory: 1024Mi
        volumeMounts:
        - mountPath: /var/prometheus
          name: prometheus-data
        - mountPath: /creds/
          name: prometheus-gcs-credentials
        - mountPath: /etc/prometheus-shared
          name: prometheus-config
        - mountPath: /etc/prometheus
          name: prometheus-config-template
      volumes:
      - name: prometheus-config-template
        configMap:
          name: prometheus-config
      - name: prometheus-config
        emptyDir: {}
      - name: prometheus-rules
        configMap:
          name: prometheus-rules
      - name: prometheus-gcs-credentials
        secret:
          defaultMode: 420
          # NOTE: gcs-credentials secret with single file gcs-credentials.json (GCS service account) is required.
          secretName: prometheus-gcs-credentials
  volumeClaimTemplates:
  - metadata:
      name: prometheus-data
      namespace: prometheus
      labels:
        app: prometheus
    spec:
      accessModes:
      - ReadWriteOnce
      storageClassName: standard
      resources:
        requests:
          storage: 1Gi
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-config
  namespace: prometheus
  labels:
    app: prometheus
data:
  prometheus.yaml.tmpl: |-
    global:
      external_labels:
        monitor: prometheus
        replica: '$(HOSTNAME)'
    # A scrape configuration for running Prometheus on a Kubernetes cluster.
    # This uses separate scrape configs for cluster components (i.e. API server, node)
    # and services to allow each to use different authentication configs.
    #
    # Kubernetes labels will be added as Prometheus labels on metrics via the
    # `labelmap` relabeling action.
    #
    # If you are using Kubernetes 1.7.2 or earlier, please take note of the comments
    # for the kubernetes-cadvisor job; you will need to edit or remove this job.

    # Scrape config for API servers.
    #
    # Kubernetes exposes API servers as endpoints to the default/kubernetes
    # service so this uses `endpoints` role and uses relabelling to only keep
    # the endpoints associated with the default/kubernetes service using the
    # default named port `https`. This works for single API server deployments as
    # well as HA API server deployments.
    scrape_configs:
    - job_name: 'kubernetes-apiservers'

      kubernetes_sd_configs:
      - role: endpoints

      # Default to scraping over https. If required, just disable this or change to
      # `http`.
      scheme: https

      # This TLS & bearer token file config is used to connect to the actual scrape
      # endpoints for cluster components. This is separate to discovery auth
      # configuration because discovery & scraping are two separate concerns in
      # Prometheus. The discovery auth config is automatic if Prometheus runs inside
      # the cluster. Otherwise, more config options have to be provided within the
      # <kubernetes_sd_config>.
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
        # If your node certificates are self-signed or use a different CA to the
        # master CA, then disable certificate verification below. Note that
        # certificate verification is an integral part of a secure infrastructure
        # so this should only be disabled in a controlled environment. You can
        # disable certificate verification by uncommenting the line below.
        #
        # insecure_skip_verify: true
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      # Keep only the default/kubernetes service endpoints for the https port. This
      # will add targets for each API server which Kubernetes adds an endpoint to
      # the default/kubernetes service.
      relabel_configs:
      - source_labels: [__meta_kubernetes_namespace, __meta_kubernetes_service_name, __meta_kubernetes_endpoint_port_name]
        action: keep
        regex: default;kubernetes;https

    # Scrape config for nodes (kubelet).
    #
    # Rather than connecting directly to the node, the scrape is proxied though the
    # Kubernetes apiserver.  This means it will work if Prometheus is running out of
    # cluster, or can't connect to nodes for some other reason (e.g. because of
    # firewalling).
    - job_name: 'kubernetes-nodes'

      # Default to scraping over https. If required, just disable this or change to
      # `http`.
      scheme: https

      # This TLS & bearer token file config is used to connect to the actual scrape
      # endpoints for cluster components. This is separate to discovery auth
      # configuration because discovery & scraping are two separate concerns in
      # Prometheus. The discovery auth config is automatic if Prometheus runs inside
      # the cluster. Otherwise, more config options have to be provided within the
      # <kubernetes_sd_config>.
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
      - role: node

      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics

    # Scrape config for Kubelet cAdvisor.
    #
    # This is required for Kubernetes 1.7.3 and later, where cAdvisor metrics
    # (those whose names begin with 'container_') have been removed from the
    # Kubelet metrics endpoint.  This job scrapes the cAdvisor endpoint to
    # retrieve those metrics.
    #
    # In Kubernetes 1.7.0-1.7.2, these metrics are only exposed on the cAdvisor
    # HTTP endpoint; use "replacement: /api/v1/nodes/${1}:4194/proxy/metrics"
    # in that case (and ensure cAdvisor's HTTP server hasn't been disabled with
    # the --cadvisor-port=0 Kubelet flag).
    #
    # This job is not necessary and should be removed in Kubernetes 1.6 and
    # earlier versions, or it will cause the metrics to be scraped twice.
    - job_name: 'kubernetes-cadvisor'

      # Default to scraping over https. If required, just disable this or change to
      # `http`.
      scheme: https

      # This TLS & bearer token file config is used to connect to the actual scrape
      # endpoints for cluster components. This is separate to discovery auth
      # configuration because discovery & scraping are two separate concerns in
      # Prometheus. The discovery auth config is automatic if Prometheus runs inside
      # the cluster. Otherwise, more config options have to be provided within the
      # <kubernetes_sd_config>.
      tls_config:
        ca_file: /var/run/secrets/kubernetes.io/serviceaccount/ca.crt
      bearer_token_file: /var/run/secrets/kubernetes.io/serviceaccount/token

      kubernetes_sd_configs:
      - role: node

      relabel_configs:
      - action: labelmap
        regex: __meta_kubernetes_node_label_(.+)
      - target_label: __address__
        replacement: kubernetes.default.svc:443
      - source_labels: [__meta_kubernetes_node_name]
        regex: (.+)
        target_label: __metrics_path__
        replacement: /api/v1/nodes/${1}/proxy/metrics/cadvisor

    # Example scrape config for service endpoints.
    #
    # The relabeling allows the actual service scrape endpoint to be configured
    # for all or only some endpoints.
    - job_name: 'kubernetes-service-endpoints'

      kubernetes_sd_configs:
      - role: endpoints

      relabel_configs:
      # Example relabel to scrape only endpoints that have
      # "example.io/should_be_scraped = true" annotation.
      #  - source_labels: [__meta_kubernetes_service_annotation_example_io_should_be_scraped]
      #    action: keep
      #    regex: true
      #
      # Example relabel to customize metric path based on endpoints
      # "example.io/metric_path = <metric path>" annotation.
      #  - source_labels: [__meta_kubernetes_service_annotation_example_io_metric_path]
      #    action: replace
      #    target_label: __metrics_path__
      #    regex: (.+)
      #
      # Example relabel to scrape only single, desired port for the service based
      # on endpoints "example.io/scrape_port = <port>" annotation.
      #  - source_labels: [__address__, __meta_kubernetes_service_annotation_example_io_scrape_port]
      #    action: replace
      #    regex: ([^:]+)(?::\d+)?;(\d+)
      #    replacement: $1:$2
      #    target_label: __address__
      #
      # Example relabel to configure scrape scheme for all service scrape targets
      # based on endpoints "example.io/scrape_scheme = <scheme>" annotation.
      #  - source_labels: [__meta_kubernetes_service_annotation_example_io_scrape_scheme]
      #    action: replace
      #    target_label: __scheme__
      #    regex: (https?)

      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_service_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - source_labels: [__meta_kubernetes_service_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - action: labelmap
        regex: __meta_kubernetes_service_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_service_name]
        action: replace
        target_label: kubernetes_name

    # Example scrape config for probing services via the Blackbox Exporter.
    #
    # The relabeling allows the actual service scrape endpoint to be configured
    # for all or only some services.
    # - job_name: 'kubernetes-services'

    #   metrics_path: /probe
    #   params:
    #     module: [http_2xx]

    #   kubernetes_sd_configs:
    #   - role: service

    #   relabel_configs:
    #   # Example relabel to probe only some services that have "example.io/should_be_probed = true" annotation
    #   #  - source_labels: [__meta_kubernetes_service_annotation_example_io_should_be_probed]
    #   #    action: keep
    #   #    regex: true
    #   - source_labels: [__address__]
    #     target_label: __param_target
    #   - target_label: __address__
    #     replacement: blackbox-exporter.example.com:9115
    #   - source_labels: [__param_target]
    #     target_label: instance
    #   - action: labelmap
    #     regex: __meta_kubernetes_service_label_(.+)
    #   - source_labels: [__meta_kubernetes_namespace]
    #     target_label: kubernetes_namespace
    #   - source_labels: [__meta_kubernetes_service_name]
    #     target_label: kubernetes_name

    # Example scrape config for probing ingresses via the Blackbox Exporter.
    #
    # The relabeling allows the actual ingress scrape endpoint to be configured
    # for all or only some services.
    # - job_name: 'kubernetes-ingresses'

    #   metrics_path: /probe
    #   params:
    #     module: [http_2xx]

    #   kubernetes_sd_configs:
    #   - role: ingress

    #   relabel_configs:
    #   # Example relabel to probe only some ingresses that have "example.io/should_be_probed = true" annotation
    #   #  - source_labels: [__meta_kubernetes_ingress_annotation_example_io_should_be_probed]
    #   #    action: keep
    #   #    regex: true
    #   - source_labels: [__meta_kubernetes_ingress_scheme,__address__,__meta_kubernetes_ingress_path]
    #     regex: (.+);(.+);(.+)
    #     replacement: ${1}://${2}${3}
    #     target_label: __param_target
    #   - target_label: __address__
    #     replacement: blackbox-exporter.example.com:9115
    #   - source_labels: [__param_target]
    #     target_label: instance
    #   - action: labelmap
    #     regex: __meta_kubernetes_ingress_label_(.+)
    #   - source_labels: [__meta_kubernetes_namespace]
    #     target_label: kubernetes_namespace
    #   - source_labels: [__meta_kubernetes_ingress_name]
    #     target_label: kubernetes_name

    # Example scrape config for pods
    #
    # The relabeling allows the actual pod scrape to be configured
    # for all the declared ports (or port-free target if none is declared)
    # or only some ports.
    - job_name: 'kubernetes-pods'

      kubernetes_sd_configs:
      - role: pod

      relabel_configs:
      # Example relabel to scrape only pods that have
      # "example.io/should_be_scraped = true" annotation.
      #  - source_labels: [__meta_kubernetes_pod_annotation_example_io_should_be_scraped]
      #    action: keep
      #    regex: true
      #
      # Example relabel to customize metric path based on pod
      # "example.io/metric_path = <metric path>" annotation.
      #  - source_labels: [__meta_kubernetes_pod_annotation_example_io_metric_path]
      #    action: replace
      #    target_label: __metrics_path__
      #    regex: (.+)
      #
      # Example relabel to scrape only single, desired port for the pod
      # based on pod "example.io/scrape_port = <port>" annotation.
      # Note that __address__ is modified here, so if pod containers' ports
      # are declared, they all will be ignored.
      #  - source_labels: [__address__, __meta_kubernetes_pod_annotation_example_io_scrape_port]
      #    action: replace
      #    regex: ([^:]+)(?::\d+)?;(\d+)
      #    replacement: $1:$2
      #    target_label: __address__

      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scrape]
        action: keep
        regex: true
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_path]
        action: replace
        target_label: __metrics_path__
        regex: (.+)
      - source_labels: [__address__, __meta_kubernetes_pod_annotation_prometheus_io_port]
        action: replace
        regex: ([^:]+)(?::\d+)?;(\d+)
        replacement: $1:$2
        target_label: __address__
      - source_labels: [__meta_kubernetes_pod_annotation_prometheus_io_scheme]
        action: replace
        target_label: __scheme__
        regex: (https?)
      - action: labelmap
        regex: __meta_kubernetes_pod_label_(.+)
      - source_labels: [__meta_kubernetes_namespace]
        action: replace
        target_label: kubernetes_namespace
      - source_labels: [__meta_kubernetes_pod_name]
        action: replace
        target_label: kubernetes_pod_name

    # load rule files
    rule_files:
    - '/prometheus-rules/*.yaml'

  bucket.yaml: |-
    type: GCS
    config:
      bucket: ${GCS_BUCKET_NAME}
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: prometheus-rules
  namespace: prometheus
  labels:
    app: prometheus
data:
  rules.yaml: |-
---
apiVersion: v1
kind: Secret
metadata:
  name: prometheus-gcs-credentials
  namespace: prometheus
  labels:
    app: prometheus
type: Opaque
data:
  gcs-credentials.json: ${GCS_CREDENTIALS}